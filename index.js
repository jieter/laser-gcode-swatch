
function number_format(n) {
    return (+n).toFixed(4).replace(/([0-9]+(\.[0-9]+[1-9])?)(\.?0+$)/,'$1');
}

function coord(x, y) {
    return 'X' + number_format(x) + ' Y' + number_format(y);
}

function G1(x, y){ return 'G1 ' + coord(x, y); }
function G0(x, y){ return 'G0 ' + coord(x, y); }

function laser_off() {
    return 'M5 S0';
}

function laser_on(intensity, feedrate, cmds) {
    if (Array.isArray(cmds)) {
        cmds = cmds.join('\n');
    }

    return `G1 F${feedrate}G4 P0 M3 S${intensity}\n${cmds}\n${laser_off()}`;
}

function square(x, y, dx, dy, stepy, intensity, feedrate) {
    var cmds = [`(square feedrate=${feedrate}, power=${intensity})`, G0(x, y)];
    var steps = (dy / stepy);
    for (var i = 0; i <= steps; i++) {
        var cury = y + (i * stepy);
        var direction  = (i + 1) % 2;
        var curx = x + direction * dx;

        cmds.push(G1(curx, cury));
        if (i < steps) {
            cmds.push(G1(curx, cury + stepy));
        }
    }

    return laser_on(intensity, feedrate, cmds);
}

function distance(a, b) {
    return Math.sqrt(
        Math.pow(b[0] - a[0], 2) +
        Math.pow(b[1] - a[1], 2)
    );
}

function interpolate_quadratic_bezier(q0, q1, q2) {
    var smoothness = 5;
    var segments = (distance(q0, q1) + distance(q1, q1)) / smoothness;

    var ret = [];
    for (var i = 0; i < segments; i++) {
        var t = i * (1 / segments);
        var tinv = 1 - t;
        ret.push([
            tinv * tinv * q0[0] + 2 * t * tinv * q1[0] + t * t * q2[0],
            tinv * tinv * q0[1] + 2 * t * tinv * q1[1] + t * t * q2[1],
        ]);
    }
    return ret;
}

function text(x, y, s, options) {
    // force string
    s = '' + s;

    options = Object.assign({}, {
        intensity: 1000,
        fontSize: 10,
        rotate: 0
    }, options);


    // rotation function
    var R = function (p) {
        var alpha = options.rotate * Math.PI / 180;
        var x = p.x || p[0];
        var y = p.y || p[1];

        return [
            x * Math.cos(alpha) - y * Math.sin(alpha),
            x * Math.sin(alpha) + y * Math.cos(alpha)
        ];
    };

    var ret = [`(text "${s}" at [${x}, ${y}])\n`];
    var first, prev = [x, y];
    options.font.getPath(s, x, y, options.fontSize).commands.forEach(function (command) {
        var p = R(command);
        if (command['type'] != 'Z' && (isNaN(p[0]) || isNaN(p[1]))) {
            console.error(command, p);
        }
        if (first === undefined) {
            first = p;
        }
        switch (command.type) {
        case 'M':
            ret.push(laser_off());
            ret.push(G0(p[0], -p[1]));
            ret.push('M4 S' + options.intensity);
            break;
        case 'L':
            ret.push(G1(p[0], -p[1]));
            break;
        case 'Z':
            ret.push(G1(first[0], -first[1]));
            first = undefined;
            break;
        case 'C':
            // bezier curve from current postion to given coordinate
            // with two control points
            // TODO.
            break;
        case 'Q':
            // Quadratic bezier curve from current position to given coordinate
            // with one control point
            var cp = R([command.x1, command.y1]);
            interpolate_quadratic_bezier(prev, cp, p).forEach(function (xy) {
                ret.push(G1(xy[0], -xy[1]));
            });
            break;
        default:
            console.error(command);
        }
        prev = p;
    });
    return laser_on(options.intensity, options.feedrate, ret) + '\nM5 S0';
}
var today = new Date();

var default_options = {
    // stop spindle, absolute positioning, metric coordinates
    preamble: `M5 S0 G90 G21`,
    // program end
    postamble: 'M2',
    intensity_min: 400,
    intensity_step: 100,
    intensity_max: 1200,
    feedrate_min: 1000,
    feedrate_step: 500,
    feedrate_max: 3500,

    size_x: 10,
    space_x: 2,

    size_y: 10,
    space_y: 2,

    stepover: 0.5,

    fontName: 'fonts/Y14.5M-2009.ttf',
    font_settings: {
        fontSize: 6,
        intensity: 1000,
        feedrate: 3000
    }
};

function swatch(options) {
    options = Object.assign({}, default_options, options);

    var fontSize = options.font_settings.fontSize;
    var size = fontSize * 2;

    var font_rotated_min_90 = Object.assign({}, options.font_settings, {rotate: -90});

    var commands = [
        `( Generated by laser-gcode-swatch on ${today.toISOString()})`,
        `( using font: "${options.fontName}")`,
        options.preamble,
        G0(0, 0),
        text(-size, size, '' + options.stepover, options.font_settings),
        text(0, -(size / 1.5), 'Speed -> ', font_rotated_min_90),
        text(0, size, 'Power ->', options.font_settings)
    ];

    var feedrate_steps = Math.ceil((options.feedrate_max - options.feedrate_min) / options.feedrate_step);
    var intensity_steps = Math.ceil((options.intensity_max - options.intensity_min) / options.intensity_step);
    for (var i = 0; i <= feedrate_steps; i++) {
        var x = 0;
        var y = i * (options.size_y + options.space_y);
        var feedrate = options.feedrate_min + i * options.feedrate_step;
        commands.push(text(y, x - 2, '' + feedrate, font_rotated_min_90));

        for (var j = 0; j <= intensity_steps; j++) {
            var intensity = options.intensity_min + j * options.intensity_step;
            x = j * (options.size_x + options.space_x);
            if (i == 0) {
                commands.push(text(x, y + fontSize, '' + intensity, options.font_settings));
            }
            commands.push(
                square(x, y, options.size_x, options.size_y, options.stepover, intensity, feedrate)
            );
        }
    }
    // back to home
    commands.push(G0(0, 0));
    commands.push(options.postamble);

    return commands.join('\n');
}
module.exports = {
    options: default_options,
    swatch: swatch
};

if (typeof require != 'undefined' && require.main==module) {
    var font = require('opentype.js').loadSync(default_options.fontName);
    default_options.font_settings.font = font;
    console.log(swatch());
}
